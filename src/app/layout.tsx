"use client";
import "./globals.css";
import type { Metadata } from "next";
import { Source_Code_Pro } from "next/font/google";
import { CacheProvider } from "@chakra-ui/next-js";
import { Box, ChakraProvider, Flex, Text } from "@chakra-ui/react";
import "./scrollbar.css";
import { CSSTransition, TransitionGroup } from "react-transition-group";
import NavBar from "@/components/NavBar";
import { useState } from "react";
import { usePathname } from "next/navigation";
const sourceCodePro = Source_Code_Pro({ subsets: ["latin"] });

// export const metadata: Metadata = {
// 	title: "Khalil Collins",
// 	description: "Generated by create next app",
// };
interface PageHeaders {
	[key: string]: [string, string];
}
const pageHeaders: PageHeaders = {
	home: ["Khalil", "Collins"],
	about: ["about", "me"],
	skills: ["my", "skills"],
	projects: ["my", "projects"],
	contact: ["contact", "me"],
};
export default function RootLayout({
	children,
}: {
	children: React.ReactNode;
}) {
	const pathName = usePathname();
	console.log(pathName);
	const isStartPage = pathName === "/";
	let page = pathName.slice(1);

	return (
		<>
			<html lang="en">
				<body className={sourceCodePro.className}>
					<CacheProvider>
						<ChakraProvider>
							<Box>
								<Flex
									h="100vh"
									w="100vw"
									direction="column"
									align="center"
									justify="flex-start" // Adjust this to "center" if you want to center content vertically
									style={{
										objectFit: "contain",
										gap: "20px", // Add spacing between child components
									}}
									bgColor="#000"
								>
									{!isStartPage && <NavBar />}
									<TransitionGroup
										component={null} // Disable the wrapping of the TransitionGroup with an extra DOM element
										style={{
											// Set the CSSTransition styles here
											position: "absolute", // Take the CSSTransition out of the flex flow
											width: "100%", // Take up the full width of the parent (Flex container)
											height: "100%", // Take up the full height of the parent (Flex container)
										}}
									>
										<CSSTransition
											classNames="page"
											timeout={{ enter: 300, exit: 300 }}
											style={{
												// Set the CSSTransition styles here
												// Take the CSSTransition out of the flex flow
												width: "100%", // Take up the full width of the parent (Flex container)
												height: "100%", // Take up the full height of the parent (Flex container)
											}}
										>
											<Flex
												direction="column"
												overflowY={["auto", "auto", "auto", "hidden"]}
												w="100%"
												h="100%"
												p={["12px", "12px", "0px 72px", "24px 124px"]}
												align={
													pathName === "/home"
														? ["center", "center", "center", "center"]
														: ["center", "center", "center", "flex-start"]
												}
											>
												{!isStartPage && page !== "home" && (
													<Text
														as="h1"
														size="3xl"
														color="#C1CED9"
														fontSize={["48px", "48px", "64px"]}
														fontWeight="bold"
														letterSpacing="-4px"
														mb="16px"
													>
														{pageHeaders[page][0]}.
														<span style={{ color: "#1CFF25" }}>
															{pageHeaders[page][1]}()
														</span>
													</Text>
												)}
												{children}
											</Flex>
										</CSSTransition>
									</TransitionGroup>
								</Flex>
							</Box>
						</ChakraProvider>
					</CacheProvider>
				</body>
			</html>
		</>
	);
}
